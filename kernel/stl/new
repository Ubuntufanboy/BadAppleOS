#ifndef __NEW_H__
#define __NEW_H__

#include <malloc.h>
#include <stdio.h>
#include <panic.h>

namespace std {


void bad_alloc(const char *what = NULL) {
	if (what == NULL) {
		panic::panic("Bad alloc.");
	}
	panic::panic(what);
}

} /* std */

inline void *operator new(size_t n) {
	void *p = malloc(n);
	printf("[new] %d bytes, pointer = 0x%x\n", n, (int) p);
	if (p == NULL) {
		std::bad_alloc();
	}
	return p;
}

inline void *operator new [](size_t n) {
	void *p = malloc(n);
	printf("[new] %d bytes, pointer = 0x%x\n", n, (int) p);
	if (p == NULL) {
		std::bad_alloc();
	}
	return p;
}

inline void operator delete(void *p) {
	printf("[delete] pointer = 0x%x\n", (int) p);
	return free(p);
}

inline void operator delete [](void *p) {
	printf("[delete] pointer = 0x%x\n", (int) p);
	return free(p);
}

/* placement new. */
inline void *operator new(size_t, void *p) { 
	return p; 
}

inline void *operator new [](size_t, void *p) {
	return p; 
}

inline void operator delete(void *, void *)  { }

inline void operator delete [](void *, void *) { }

#endif