#ifndef __NEW__
#define __NEW__

#include <malloc.h>
#include <memory.h>
#include <stdio.h>
#include <panic.h>

namespace std {

inline void bad_alloc(const char *what = NULL) {
  if (what == NULL) {
    panic::panic("Bad alloc.");
  }
  panic::panic(what);
}

} /* std */

inline void *operator new(size_t n) {
  void *p = malloc(n);
  mm::log_new(n, p);
  if (p == NULL) {
    std::bad_alloc();
  }
  return p;
}

inline void *operator new [](size_t n) {
  void *p = malloc(n);
  mm::log_new(n, p);
  if (p == NULL) {
    std::bad_alloc();
  }
  return p;
}

inline void operator delete(void *p) {
  mm::log_delete(p);
  return free(p);
}

inline void operator delete [](void *p) {
  mm::log_delete(p);
  return free(p);
}

/* placement new. */
inline void *operator new(size_t, void *p) { 
  return p; 
}

inline void *operator new [](size_t, void *p) {
  return p; 
}

inline void operator delete(void *, void *)  { }

inline void operator delete [](void *, void *) { }

#endif
