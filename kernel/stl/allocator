#ifndef __ALLOCATOR__
#define __ALLOCATOR__

#include <new>

namespace std {

template <class T> 
struct allocator {
    typedef size_t size_type;
    typedef ptrdiff_t difference_type;
    typedef T* pointer;
    typedef const T* const_pointer;
    typedef T& reference;
    typedef const T& const_reference;
    typedef T value_type;

    template <class U> struct rebind { typedef allocator<U> other; };
    allocator() { }
    allocator(const allocator &) { }

    template <class U> allocator(const allocator<U> &)  {}

    ~allocator() {}

    pointer address(reference x) const { return &x; }
    const_pointer address(const_reference x) const { return &x; }

    pointer allocate(size_type s, void const * = 0) {
		if (s == 0) {
			return NULL;
		}
        pointer temp = new T[s]; 
        if (temp == NULL) {
			std::bad_alloc();
		}
        return temp;
    }

    void deallocate(pointer p, size_type) {
		delete [] p;
    }

    size_type max_size() const { 
        return (~size_t(0)) / sizeof(T); 
    }

    void construct(pointer p, const T &val) {
        new((void *)p) T(val);
    }

    void destroy(pointer p) {
        p->~T();
    }
};

} /* std */

#endif